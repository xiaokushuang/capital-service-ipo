/* javascripts\build\utils.js */

// Generated by CoffeeScript 1.7.0
(function() {
  if (!String.prototype.endsWith) {

    /*
     * Determines whether a string ends with the specified suffix.
     * 
     * @param  {String} suffix
     * @return Boolean
     */
    String.prototype.endsWith = function(suffix) {
      return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
  }

  if (!String.prototype.trim) {

    /*
     * Removes whitespace from both sides of a string.
     * 
     * @return {String}
     */
    String.prototype.trim = function() {
      return this.replace(/^\s+|\s+$/g, '');
    };
  }

  if (!Array.prototype.indexOf) {

    /*
     * The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.
     * 
     * @param  {Variant} searchElement
     * @param  {Integer} fromIndex
     * @return {Integer}
     */
    Array.prototype.indexOf = function(searchElement, fromIndex) {
      var i, length, _i;
      if (this === void 0 || this === null) {
        throw new TypeError('"this" is null or not defined');
      }
      length = this.length >>> 0;
      fromIndex = +fromIndex || 0;
      if (Math.abs(fromIndex) === Infinity) {
        fromIndex = 0;
      }
      if (fromIndex < 0) {
        fromIndex += length;
        if (fromIndex < 0) {
          fromIndex = 0;
        }
      }
      for (i = _i = fromIndex; fromIndex <= length ? _i < length : _i > length; i = fromIndex <= length ? ++_i : --_i) {
        if (this[i] === searchElement) {
          return i;
        }
      }
      return -1;
    };
  }

  if (!Function.prototype.bind) {
    Function.prototype.bind = function(oThis) {
      var aArgs, fBound, fNOP, fToBind;
      if (typeof this !== "function") {
        throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
      }
      aArgs = Array.prototype.slice.call(arguments, 1);
      fToBind = this;
      fNOP = function() {};
      fBound = function() {
        return fToBind.apply((this instanceof fNOP && oThis ? this : oThis), aArgs.concat(Array.prototype.slice.call(arguments)));
      };
      fNOP.prototype = this.prototype;
      fBound.prototype = new fNOP();
      return fBound;
    };
  }

  if (!Object.keys) {
    Object.keys = (function() {
      'use strict';
      var dontEnums, hasDontEnumBug, hasOwnProperty;
      hasOwnProperty = Object.prototype.hasOwnProperty;
      hasDontEnumBug = {
        toString: null
      }.propertyIsEnumerable('toString') ? false : true;
      dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];
      return function(obj) {
        var dontEnum, prop, result, _i, _j, _len, _len1;
        if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
          throw new TypeError('Object.keys called on non-object');
        }
        result = [];
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          prop = obj[_i];
          if (hasOwnProperty.call(obj, prop)) {
            result.push(prop);
          }
        }
        if (hasDontEnumBug) {
          for (_j = 0, _len1 = dontEnums.length; _j < _len1; _j++) {
            dontEnum = dontEnums[_j];
            if (hasOwnProperty.call(obj, dontEnum)) {
              result.push(dontEnum);
            }
          }
        }
        return result;
      };
    }).call(this);
  }


  /*
   * Detect screen size.
   * 
   * @param  {jQuery Object} $ssw_point
   * @param  {jQuery Object} $tsw_point
   * @return {String}
   */

  window.getScreenSize = function($ssw_point, $tsw_point) {
    if ($ssw_point.is(':visible')) {
      return 'small';
    } else if ($tsw_point.is(':visible')) {
      return 'tablet';
    } else {
      return 'desktop';
    }
  };

}).call(this);



/* javascripts\build\app.js */

// Generated by CoffeeScript 1.7.0
(function() {
  var PixelAdminApp, SETTINGS_DEFAULTS;

  SETTINGS_DEFAULTS = {
    is_mobile: false,
    resize_delay: 400,
    stored_values_prefix: 'pa_',
    main_menu: {
      accordion: true,
      animation_speed: 250,
      store_state: true,
      store_state_key: 'mmstate'
    },
    consts: {
      COLORS: ['#71c73e', '#77b7c5', '#d54848', '#6c42e5', '#e8e64e', '#dd56e6', '#ecad3f', '#618b9d', '#b68b68', '#36a766', '#3156be', '#00b3ff', '#646464', '#a946e8', '#9d9d9d']
    }
  };


  /*
   * @class PixelAdminApp
   */

  PixelAdminApp = function() {
    this.init = [];
    this.plugins = {};
    this.settings = {};
    this.localStorageSupported = typeof window.Storage !== "undefined" ? true : false;
    return this;
  };


  /*
   * Start application. Method takes an array of initializers and a settings object(that overrides default settings).
   * 
   * @param  {Array} suffix
   * @param  {Object} settings
   * @return this
   */

  PixelAdminApp.prototype.start = function(init, settings) {
    if (init == null) {
      init = [];
    }
    if (settings == null) {
      settings = {};
    }
    window.onload = (function(_this) {
      return function() {
        var initilizer, _i, _len, _ref;
        $('html').addClass('pxajs');
        if (init.length > 0) {
          $.merge(_this.init, init);
        }
        _this.settings = $.extend(true, {}, SETTINGS_DEFAULTS, settings || {});
        _this.settings.is_mobile = /iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase());
        if (_this.settings.is_mobile) {
          if (FastClick) {
            FastClick.attach(document.body);
          }
        }
        _ref = _this.init;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          initilizer = _ref[_i];
          $.proxy(initilizer, _this)();
        }
        $(window).trigger("pa.loaded");
        return $(window).resize();
      };
    })(this);
    return this;
  };


  /*
   * Add initializer to the stack.
   * 
   * @param  {Function} callback
   */

  PixelAdminApp.prototype.addInitializer = function(callback) {
    return this.init.push(callback);
  };


  /*
   * Initialize plugin and add it to the plugins list.
   * 
   * @param  {String} plugin_name
   * @param  {Instance} plugin
   */

  PixelAdminApp.prototype.initPlugin = function(plugin_name, plugin) {
    this.plugins[plugin_name] = plugin;
    if (plugin.init) {
      return plugin.init();
    }
  };


  /*
   * Save value in the localStorage/Cookies.
   * 
   * @param  {String}  key
   * @param  {String}  value
   * @param  {Boolean} use_cookies
   */

  PixelAdminApp.prototype.storeValue = function(key, value, use_cookies) {
    var e;
    if (use_cookies == null) {
      use_cookies = false;
    }
    if (this.localStorageSupported && !use_cookies) {
      try {
        window.localStorage.setItem(this.settings.stored_values_prefix + key, value);
        return;
      } catch (_error) {
        e = _error;
        1;
      }
    }
    return document.cookie = this.settings.stored_values_prefix + key + '=' + escape(value);
  };


  /*
   * Save key/value pairs in the localStorage/Cookies.
   * 
   * @param  {Object} pairs
   * @param  {Boolean} use_cookies
   */

  PixelAdminApp.prototype.storeValues = function(pairs, use_cookies) {
    var e, key, value, _results;
    if (use_cookies == null) {
      use_cookies = false;
    }
    if (this.localStorageSupported && !use_cookies) {
      try {
        for (key in pairs) {
          value = pairs[key];
          window.localStorage.setItem(this.settings.stored_values_prefix + key, value);
        }
        return;
      } catch (_error) {
        e = _error;
        1;
      }
    }
    _results = [];
    for (key in pairs) {
      value = pairs[key];
      _results.push(document.cookie = this.settings.stored_values_prefix + key + '=' + escape(value));
    }
    return _results;
  };


  /*
   * Get value from the localStorage/Cookies.
   * 
   * @param  {String} key
   * @param  {Boolean} use_cookies
   */

  PixelAdminApp.prototype.getStoredValue = function(key, use_cookies, deflt) {
    var cookie, cookies, e, k, pos, r, v, _i, _len;
    if (use_cookies == null) {
      use_cookies = false;
    }
    if (deflt == null) {
      deflt = null;
    }
    if (this.localStorageSupported && !use_cookies) {
      try {
        r = window.localStorage.getItem(this.settings.stored_values_prefix + key);
        return (r ? r : deflt);
      } catch (_error) {
        e = _error;
        1;
      }
    }
    cookies = document.cookie.split(';');
    for (_i = 0, _len = cookies.length; _i < _len; _i++) {
      cookie = cookies[_i];
      pos = cookie.indexOf('=');
      k = cookie.substr(0, pos).replace(/^\s+|\s+$/g, '');
      v = cookie.substr(pos + 1).replace(/^\s+|\s+$/g, '');
      if (k === (this.settings.stored_values_prefix + key)) {
        return v;
      }
    }
    return deflt;
  };


  /*
   * Get values from the localStorage/Cookies.
   * 
   * @param  {Array} keys
   * @param  {Boolean} use_cookies
   */

  PixelAdminApp.prototype.getStoredValues = function(keys, use_cookies, deflt) {
    var cookie, cookies, e, k, key, pos, r, result, v, _i, _j, _k, _len, _len1, _len2;
    if (use_cookies == null) {
      use_cookies = false;
    }
    if (deflt == null) {
      deflt = null;
    }
    result = {};
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      key = keys[_i];
      result[key] = deflt;
    }
    if (this.localStorageSupported && !use_cookies) {
      try {
        for (_j = 0, _len1 = keys.length; _j < _len1; _j++) {
          key = keys[_j];
          r = window.localStorage.getItem(this.settings.stored_values_prefix + key);
          if (r) {
            result[key] = r;
          }
        }
        return result;
      } catch (_error) {
        e = _error;
        1;
      }
    }
    cookies = document.cookie.split(';');
    for (_k = 0, _len2 = cookies.length; _k < _len2; _k++) {
      cookie = cookies[_k];
      pos = cookie.indexOf('=');
      k = cookie.substr(0, pos).replace(/^\s+|\s+$/g, '');
      v = cookie.substr(pos + 1).replace(/^\s+|\s+$/g, '');
      if (k === (this.settings.stored_values_prefix + key)) {
        result[key] = v;
      }
    }
    return result;
  };

  PixelAdminApp.Constructor = PixelAdminApp;

  window.PixelAdmin = new PixelAdminApp;

}).call(this);



/* javascripts\build\events.js */

// Generated by CoffeeScript 1.7.0
(function() {
  var delayedResizeHandler;

  delayedResizeHandler = function(callback) {
    var resizeTimer;
    resizeTimer = null;
    return function() {
      if (resizeTimer) {
        clearTimeout(resizeTimer);
      }
      delayRun("ctrlmenu()",100);
      return resizeTimer = setTimeout(function() {
        resizeTimer = null;
        return callback.call(this);
      }, PixelAdmin.settings.resize_delay);
    };
  };

  PixelAdmin.addInitializer(function() {
    var $ssw_point, $tsw_point, $window, _last_screen;
    _last_screen = null;
    $window = $(window);
    $ssw_point = $('<div id="small-screen-width-point" style="position:absolute;top:-10000px;width:10px;height:10px;background:#fff;"></div>');
    $tsw_point = $('<div id="tablet-screen-width-point" style="position:absolute;top:-10000px;width:10px;height:10px;background:#fff;"></div>');
    $('body').append($ssw_point).append($tsw_point);
    return $window.on('resize', delayedResizeHandler(function() {
      $window.trigger("pa.resize");
      if ($ssw_point.is(':visible')) {
        if (_last_screen !== 'small') {
          $window.trigger("pa.screen.small");
        }
        return _last_screen = 'small';
      } else if ($tsw_point.is(':visible')) {
        if (_last_screen !== 'tablet') {
          $window.trigger("pa.screen.tablet");
        }
        return _last_screen = 'tablet';
      } else {
        if (_last_screen !== 'desktop') {
          $window.trigger("pa.screen.desktop");
        }
        return _last_screen = 'desktop';
      }
    }));
  });

}).call(this);


/* javascripts\build\components\main-navbar.js */

// Generated by CoffeeScript 1.7.0

/*
 * Class that provides the top navbar functionality.
 *
 * @class MainNavbar
 */

(function() {
  PixelAdmin.MainNavbar = function() {
    this._scroller = null;
    this._wheight = null;
    return this;
  };


  /*
   * Initialize plugin.
   */

  PixelAdmin.MainNavbar.prototype.init = function() {
    var is_mobile;
    this.$navbar = $('#main-navbar');
    this.$header = this.$navbar.find('.navbar-header');
    this.$toggle = this.$navbar.find('.navbar-toggle:first');
    this.$collapse = $('#main-navbar-collapse');
    this.$collapse_div = this.$collapse.find('> div');
    is_mobile = false;
    $(window).on('pa.screen.small pa.screen.tablet', (function(_this) {
      return function() {
        if (_this._scroller === null && _this.$navbar.css('position') === 'fixed') {
          _this._setupScroller();
        }
        return is_mobile = true;
      };
    })(this)).on('pa.screen.desktop', (function(_this) {
      return function() {
        if (_this._scroller !== null) {
          _this._removeScroller();
        }
        return is_mobile = false;
      };
    })(this));
    return this.$navbar.on('click', '.nav-icon-btn.dropdown > .dropdown-toggle', function(e) {
      if (is_mobile) {
        e.preventDefault();
        e.stopPropagation();
        document.location.href = $(this).attr('href');
        return false;
      }
    });
  };


  /*
   * Attach scroller to navbar collapse.
   */

  PixelAdmin.MainNavbar.prototype._setupScroller = function() {
    if (this._scroller !== null) {
      return;
    }
    if ($('html').hasClass('gt-ie8')) {
      this._scroller = new IScroll('#' + this.$collapse.attr('id'), {
        scrollbars: true,
        mouseWheel: true,
        preventDefault: false
      });
      this.$navbar.on('mousedown.mn_collapse', $.proxy(this._mousedownCallback, this)).on('mousemove.mn_collapse', $.proxy(this._mousemoveCallback, this)).on('mouseup.mn_collapse', $.proxy(this._mouseupCallback, this)).on('touchstart.mn_collapse touchmove.mn_collapse', function(e) {
        return e.preventDefault();
      });
    } else {
      this._scroller = true;
    }
    this.$navbar.on('shown.bs.collapse.mn_collapse', $.proxy(((function(_this) {
      return function() {
        _this._updateCollapseHeight();
        return _this._watchWindowHeight();
      };
    })(this)), this)).on('hidden.bs.collapse.mn_collapse', $.proxy(((function(_this) {
      return function() {
        return _this._wheight = null;
      };
    })(this)), this)).on('shown.bs.dropdown.mn_collapse', $.proxy(this._updateCollapseHeight, this)).on('hidden.bs.dropdown.mn_collapse', $.proxy(this._updateCollapseHeight, this));
    return this._updateCollapseHeight();
  };


  /*
   * Detach scroller from navbar collapse.
   */

  PixelAdmin.MainNavbar.prototype._removeScroller = function() {
    if (this._scroller === null) {
      return;
    }
    this._wheight = null;
    if (this._scroller !== true) {
      this._scroller.destroy();
      this.$navbar.off('mousedown.mn_collapse').off('mousemove.mn_collapse').off('mouseup.mn_collapse').off('touchstart.mn_collapse touchmove.mn_collapse');
    }
    this._scroller = null;
    this.$navbar.off('shown.bs.collapse.mn_collapse').off('hidden.bs.collapse.mn_collapse').off('shown.bs.dropdown.mn_collapse').off('hidden.bs.dropdown.mn_collapse');
    return this.$collapse.attr('style', '');
  };


  /*
   * Mousedown callback.
   *
   * @param  {Event} e
   */

  PixelAdmin.MainNavbar.prototype._mousedownCallback = function(e) {
    if ($(e.target).is('input')) {
      return;
    }
    this._isMousePressed = true;
    return e.preventDefault();
  };


  /*
   * Mousemove callback.
   *
   * @param  {Event} e
   */

  PixelAdmin.MainNavbar.prototype._mousemoveCallback = function(e) {
    if (this._isMousePressed) {
      return e.preventDefault();
    }
  };


  /*
   * Mouseup callback.
   *
   * @param  {Event} e
   */

  PixelAdmin.MainNavbar.prototype._mouseupCallback = function(e) {
    if (this._isMousePressed) {
      this._isMousePressed = false;
      return e.preventDefault();
    }
  };


  /*
   * Update height of the collapse container and refresh scroller.
   */

  PixelAdmin.MainNavbar.prototype._updateCollapseHeight = function() {
    var h_height, w_height;
    if (this._scroller === null) {
      return;
    }
    w_height = $(window).innerHeight();
    h_height = this.$header.outerHeight();
    if ((h_height + this.$collapse_div.outerHeight()) > w_height) {
      this.$collapse.css('height', w_height - h_height);
      if (this._scroller !== true) {
        return this._scroller.refresh();
      } else {
        return this.$collapse.css('overflow', 'scroll');
      }
    } else {
      this.$collapse.attr('style', '');
      if (this._scroller !== true) {
        return this._scroller.refresh();
      }
    }
  };


  /*
   * Detecting a change of the window height.
   */

  PixelAdmin.MainNavbar.prototype._watchWindowHeight = function() {
    var checkWindowInnerHeight;
    this._wheight = $(window).innerHeight();
    checkWindowInnerHeight = (function(_this) {
      return function() {
        if (_this._wheight === null) {
          return;
        }
        if (_this._wheight !== $(window).innerHeight()) {
          _this._updateCollapseHeight();
        }
        _this._wheight = $(window).innerHeight();
        return setTimeout(checkWindowInnerHeight, 100);
      };
    })(this);
    return window.setTimeout(checkWindowInnerHeight, 100);
  };

  PixelAdmin.MainNavbar.Constructor = PixelAdmin.MainNavbar;

  PixelAdmin.addInitializer(function() {
    return PixelAdmin.initPlugin('main_navbar', new PixelAdmin.MainNavbar);
  });

}).call(this);



/* javascripts\build\components\main-menu.js */

// Generated by CoffeeScript 1.7.0

/*
 * Class that provides the main menu functionality.
 *
 * @class MainMenu
 */

(function() {
  PixelAdmin.MainMenu = function() {
    this._scroller = null;
    this._screen = null;
    this._last_screen = null;
    this._$dropdown = null;
    return this;
  };


  /*
   * Initialize plugin.
   */

  PixelAdmin.MainMenu.prototype.init = function() {
    var $ssw_point, $tsw_point, self, state;
    this.$window = $(window);
    this.$body = $('body');
    this.$menu = $('#main-menu');
    this.$animation_timer = null;
    if (!this.$menu.length) {
      return;
    }
    if (PixelAdmin.settings.main_menu.store_state) {
      state = this._getMenuState();
      // 2016/10/27 需求892 baiyang start
      //if(state==null){
        state='';
      //}
      // 2016/10/27 需求892 baiyang end
      if (state !== null) {
        if (state === 'collapsed') {
          this.$body.addClass('mm-no-transition').addClass('mmc');
         $("#home_div_tomm_div01").hide();
          $("#navigation01").show();
          setTimeout((function(_this) {
            return function() {
              return _this.$body.removeClass('mm-no-transition');
            };
          })(this), 20);
        } else {
          $("#navigation01").hide();
          $("#home_div_tomm_div01").show();
          this.$body.addClass('mm-no-transition').removeClass('mmc');
          setTimeout((function(_this) {
            return function() {
              return _this.$body.removeClass('mm-no-transition');
            };
          })(this), 20);
        }
      }
    }
    $ssw_point = $('#small-screen-width-point');
    $tsw_point = $('#tablet-screen-width-point');
    self = this;
    this._screen = getScreenSize($ssw_point, $tsw_point);
    this._last_screen = this._screen;
    this.turnOnAnimation(true);
    $("#main-menu .navigation li").on("click", function() {
    	$("#main-menu .navigation li").each(function(){
    		$(this).removeClass("active");
    	});
    	$(this).addClass("active");
    });
    this.$window.on('pa.loaded', (function(_this) {
      return function() {
        $('#main-menu .navigation > li > a > .mm-text').removeClass('no-animation');
        $('#main-menu .navigation > .mm-dropdown > ul').removeClass('no-animation');
        return $('#main-menu .menu-content').removeClass('no-animation');
      };
    })(this));
    this.$window.on('resize.pa.mm', (function(_this) {
      return function() {
        _this._last_screen = _this._screen;
        _this._screen = getScreenSize($ssw_point, $tsw_point);
        _this.closeCurrentDropdown(true);
        if ((_this._screen === 'small' && _this._last_screen !== _this._screen) || (_this._screen === 'tablet' && _this._last_screen === 'small')) {
          _this.$body.addClass('mm-no-transition');
          return setTimeout(function() {
            return _this.$body.removeClass('mm-no-transition');
          }, 20);
        }
      };
    })(this));
    this.animation_end = (function(_this) {
      return function() {
        if (_this.$animation_timer) {
          window.clearTimeout(_this.$animation_timer);
          _this.$animation_timer = null;
        }
        return _this.$animation_timer = window.setTimeout(function() {
          _this.$menu.off('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');
          return $(window).trigger('resize');
        }, 200);
      };
    })(this);
    this.$window.on('click.pa.mm', (function(_this) {
      return function() {
        return _this.closeCurrentDropdown(true);
      };
    })(this));
    $(window).on('pa.screen.small', (function(_this) {
      return function() {
        if (_this._scroller === null) {
          return _this._setupScroller();
        }
      };
    })(this)).on('pa.screen.tablet pa.screen.desktop', (function(_this) {
      return function() {
        if (_this.$menu.css('position') === 'fixed') {
          if (_this._scroller === null) {
            return _this._setupScroller();
          }
        } else {
          if (_this._scroller !== null) {
            return _this._removeScroller();
          }
        }
      };
    })(this));
    this.$menu.find('.navigation > .mm-dropdown').addClass('mm-dropdown-root');
    this.$menu.on('click.pa.mm-dropdown', '.mm-dropdown > a', function() {
      var $elem;
      $elem = $(this).parent('.mm-dropdown');
      if ($elem.hasClass('mm-dropdown-root') && self._collapsed()) {
        if ($elem.hasClass('mmc-dropdown-open')) {
          if ($elem.hasClass('freeze')) {
            self.closeCurrentDropdown(true);
          } else {
            self.freezeDropdown($elem);
          }
        } else {
          self.openDropdown($elem, true);
        }
      } else {
        if ($elem.hasClass('open')) {
          self.collapseSubmenu($elem, true);
        } else {
          if (PixelAdmin.settings.main_menu.accordion) {
            self.collapseAllSubmenus($elem);
          }
          self.expandSubmenu($elem, true);
        }
      }
      return false;
    });
    this.$menu.find('.navigation').on('mouseenter.pa.mm-dropdown', '.mm-dropdown-root', function() {
      if (self._collapsed() && (!self._$dropdown || !self._$dropdown.hasClass('freeze'))) {
        return self.openDropdown($(this));
      }
    }).on('mouseleave.pa.mm-dropdown', '.mm-dropdown-root', function() {
      return self.closeCurrentDropdown();
    });
    return $('#main-menu-toggle').on('click.pa.mm_toggle', (function(_this) {
      return function() {
        clearTimeout(ttimeout);
         $("#home_div_tomm_div01").toggle();
         $("#navigation01").toggle();
        _this._screen = getScreenSize($ssw_point, $tsw_point);
        if (_this._screen === 'small' || _this._screen === 'tablet') {
          $('#main-navbar-collapse').removeClass('in').removeClass('collapsing').stop().addClass('collapse').css('height', '0px');
          $('#main-navbar .navbar-toggle').addClass('collapsed');
          _this.$body.removeClass('mm-no-transition').toggleClass('mme');
        } else {
          _this.$body.toggleClass('mmc');
          if (PixelAdmin.settings.main_menu.store_state) {
            _this._storeMenuState(_this.$body.hasClass('mmc'));
          }
          if ($.support.transition) {
              _this.$menu.on('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', $.proxy(_this.animation_end, _this));
          } else {
              $(window).trigger('resize');
          }
          //添加触发事件
          setTimeout(function(){$('#main-menu-toggle').trigger("changemmc")},1000);
        }
        if (_this._scroller) {
          return setTimeout($.proxy(_this._updateScroller, _this), 100);
        }
      };
    })(this));
  };


  /*
   * Checking if the main menu is collapsed.
   */

  PixelAdmin.MainMenu.prototype._collapsed = function() {
    return (this._screen === 'tablet' && !this.$body.hasClass('mme')) || (this._screen === 'desktop' && this.$body.hasClass('mmc'));
  };


  /*
   * Setup scroller.
   */

  PixelAdmin.MainMenu.prototype._setupScroller = function() {
    if (this._scroller !== null) {
      return;
    }
    if ($('html').hasClass('gt-ie8')) {
      this._scroller = new IScroll('#' + this.$menu.attr('id'), {
        mouseWheel: true
      });
      this._scroller.on('scrollStart', (function(_this) {
        return function() {
          return _this.closeCurrentDropdown(true);
        };
      })(this));
    } else {
      this._scroller = true;
    }
    $(window).on('pa.resize.mm', $.proxy(this._updateScroller, this));
    return this._updateScroller();
  };


  /*
   * Remove scroller.
   */

  PixelAdmin.MainMenu.prototype._removeScroller = function() {
    if (this._scroller === null) {
      return;
    }
    if (this._scroller !== true) {
      this._scroller.destroy();
    }
    this._scroller = null;
    $(window).off('pa.resize.mm');
    return this.$menu.attr('style', '');
  };


  /*
   * Update scroller.
   */

  PixelAdmin.MainMenu.prototype._updateScroller = function() {
    if (this._scroller === null) {
      return;
    }
    if (this._scroller !== true) {
      return this._scroller.refresh();
    } else {
      if (this.$menu.find('> div').outerHeight() > this.$menu.outerHeight()) {
        return this.$menu.css({
          'overflow-y': 'scroll',
          'overflow-y': 'scroll',
          '-ms-overflow-x': 'hidden',
          'overflow-x': 'hidden'
        });
      } else {
        return this.$menu.attr('style', '');
      }
    }
  };


  /*
   * Update dropdown scroller.
   *
   * @param  {jQuery Object} $elem
   */

  PixelAdmin.MainMenu.prototype._updateDropdownScroller = function($elem) {
    var $parent, scroller;
    $parent = $elem.parents('.mmc-dropdown-open');
    if ($parent.length) {
      scroller = $parent.data('scroller');
      if (scroller && scroller !== true) {
        return scroller.refresh();
      }
    }
  };


  /*
   * Get height of the dropdown.
   *
   * @param  {jQuery Object} $ul
   */

  PixelAdmin.MainMenu.prototype._getSubmenuHeight = function($ul) {
    var height;
    if ($ul.parent('.mm-dropdown').hasClass('open')) {
      height = $ul.height();
    } else {
      height = $ul.addClass('get-height').height();
      $ul.removeClass('get-height');
    }
    return height;
  };


  /*
   * Collapse main menu dropdown.
   *
   * @param  {jQuery Object} $elem
   * @param  {Boolean} refreshScroll
   */

  PixelAdmin.MainMenu.prototype.collapseSubmenu = function($elem, refreshScroll) {
    var ul;
    ul = $('> ul', $elem);
    return ul.animate({
      height: 0
    }, PixelAdmin.settings.main_menu.animation_speed, (function(_this) {
      return function() {
        $elem.removeClass('open');
        ul.css({
          display: 'none',
          height: 'auto'
        });
        $('.mm-dropdown.open', $elem).removeClass('open').find('> ul').css({
          display: 'none',
          height: 'auto'
        });
        if (refreshScroll) {
          _this._updateScroller();
        }
        return _this._updateDropdownScroller($elem);
      };
    })(this));
  };


  /*
   * Collapse main menu dropdown.
   *
   * @param  {jQuery Object} $elem
   * @param  {Boolean} refreshScroll
   */

  PixelAdmin.MainMenu.prototype.collapseAllSubmenus = function($elem, close_other) {
    var self;
    if (close_other == null) {
      close_other = false;
    }
    self = this;
    return $elem.parent().find('> .mm-dropdown.open').each(function() {
      if (!close_other || !$(this).is($elem)) {
        return self.collapseSubmenu($(this));
      }
    });
  };


  /*
   * Expand main menu dropdown.
   *
   * @param  {jQuery Object} $elem
   * @param  {Boolean} refreshScroll
   */

  PixelAdmin.MainMenu.prototype.expandSubmenu = function($elem, refreshScroll) {
    var height, ul;
    ul = $('> ul', $elem);
    height = this._getSubmenuHeight(ul);
    ul.css({
      display: 'block',
      'height': 0
    });
    $elem.addClass('open');
    return ul.animate({
      height: height
    }, PixelAdmin.settings.main_menu.animation_speed, (function(_this) {
      return function() {
        ul.attr('style', '');
        if (refreshScroll) {
          _this._updateScroller();
        }
        return _this._updateDropdownScroller($elem);
      };
    })(this));
  };


  /*
   * Open dropdown menu.
   *
   * @param  {jQuery Object} $elem
   * @param  {Boolean} freeze
   */

  PixelAdmin.MainMenu.prototype.openDropdown = function($elem, freeze) {
    var $title, $ul, $w, max_height, min_height, setupScroller, top, w_height;
    if (freeze == null) {
      freeze = false;
    }
    if (this._$dropdown) {
      this.closeCurrentDropdown(freeze);
    }
    this._$dropdown = $elem;
    $ul = $('> ul', $elem);
    $title = $ul.find('> .mmc-title');
    if ($title.length === 0) {
      $title = $('<div class="mmc-title"></div>').text($('> a > .mm-text', $elem).text());
      $ul.prepend($title);
    }
    $elem.addClass('mmc-dropdown-open');
    setupScroller = (function(_this) {
      return function($w) {
        var scroller;
        if ($('html').hasClass('gt-ie8')) {
          scroller = new IScroll('#mmc-wrapper', {
            mouseWheel: true
          });
          if (_this._scroller && _this._scroller !== null) {
            scroller.on('beforeScrollStart', function() {
              return _this._scroller.disable();
            });
            scroller.on('scrollEnd', function() {
              return _this._scroller.enable();
            });
          }
        } else {
          scroller = true;
          $w.css({
            'overflow-y': 'scroll',
            'overflow-y': 'scroll',
            '-ms-overflow-x': 'hidden',
            'overflow-x': 'hidden'
          });
        }
        return $elem.data('scroller', scroller);
      };
    })(this);
    if (this.$body.hasClass('main-menu-fixed')) {
      w_height = this.$window.innerHeight();
      top = $elem.position().top;
      min_height = $ul.find('> .mmc-title').outerHeight() + $ul.find('> li').first().outerHeight() * 3;
      if ((top + min_height) > w_height) {
        max_height = top - $('#main-navbar').outerHeight();
        $elem.addClass('top');
      } else {
        max_height = w_height - top - $elem.outerHeight();
      }
      $w = $('<div id="mmc-wrapper" style="overflow:hidden;position:relative;max-height:' + max_height + 'px;"></div>');
      $w.append($('<div></div>').append($ul.find('> li'))).appendTo($ul);
      setupScroller($w);
      if ($elem.hasClass('top')) {
        $ul.append($title);
      }
    }
    if (freeze) {
      return this.freezeDropdown($elem);
    }
  };


  /*
   * Close dropdown menu.
   *
   * @param  {Boolean} freeze
   */

  PixelAdmin.MainMenu.prototype.closeCurrentDropdown = function(force) {
    var $ul, scroller;
    if (force == null) {
      force = false;
    }
    if (!this._$dropdown || (this._$dropdown.hasClass('freeze') && !force)) {
      return;
    }
    $ul = this._$dropdown.find('> ul');
    scroller = this._$dropdown.data('scroller');
    if (scroller) {
      if (scroller !== true) {
        scroller.destroy();
      }
      this._$dropdown.data('scroller', null);
      $ul.append($('#mmc-wrapper > div > li'));
      $('#mmc-wrapper').remove();
    }
    if (this._scroller && this._scroller !== true) {
      this._scroller.enable();
    }
    this._$dropdown.removeClass('mmc-dropdown-open freeze top');
    return this._$dropdown = null;
  };


  /*
   * Freeze dropdown menu.
   *
   * @param  {jQuery Object} $dd
   */

  PixelAdmin.MainMenu.prototype.freezeDropdown = function($dd) {
    return $dd.addClass('freeze');
  };


  /*
   * Turn on dropdowns animation.
   */

  PixelAdmin.MainMenu.prototype.turnOnAnimation = function(delayed) {
    if (delayed == null) {
      delayed = false;
    }
    this.$body.addClass('main-menu-animated');
    if (delayed) {
      $('#main-menu .navigation > li > a > .mm-text').addClass('no-animation');
      $('#main-menu .navigation > .mm-dropdown > ul').addClass('no-animation');
      $('#main-menu .menu-content').addClass('no-animation');
    }
    $('#main-menu .navigation > li > a > .mm-text').addClass('mmc-dropdown-delay animated fadeIn');
    $('#main-menu .navigation > .mm-dropdown > ul').addClass('mmc-dropdown-delay animated fadeInLeft');
    $('#main-menu .menu-content').addClass('animated fadeIn');
    if (this.$body.hasClass('main-menu-right') || (this.$body.hasClass('right-to-left') && !this.$body.hasClass('main-menu-right'))) {
      return $('#main-menu .navigation > .mm-dropdown > ul').addClass('fadeInRight');
    } else {
      return $('#main-menu .navigation > .mm-dropdown > ul').addClass('fadeInLeft');
    }
  };


  /*
   * Turn off dropdowns animation.
   */

  PixelAdmin.MainMenu.prototype.turnOffAnimation = function() {
    this.$body.removeClass('main-menu-animated');
    $('#main-menu .navigation > li > a > .mm-text').removeClass('mmc-dropdown-delay animated fadeIn');
    $('#main-menu .menu-content').removeClass('animated fadeIn');
    return $('#main-menu .navigation > .mm-dropdown > ul').removeClass('mmc-dropdown-delay animated fadeInLeft fadeInRight');
  };


  /*
   * Load menu state.
   */

  PixelAdmin.MainMenu.prototype._getMenuState = function() {
    return PixelAdmin.getStoredValue(PixelAdmin.settings.main_menu.store_state_key, null);
  };


  /*
   * Store menu state.
   */

  PixelAdmin.MainMenu.prototype._storeMenuState = function(is_collapsed) {
    if (!PixelAdmin.settings.main_menu.store_state) {
      return;
    }
    return PixelAdmin.storeValue(PixelAdmin.settings.main_menu.store_state_key, is_collapsed ? 'collapsed' : 'expanded');
  };

  PixelAdmin.MainMenu.Constructor = PixelAdmin.MainMenu;

  PixelAdmin.addInitializer(function() {
    return PixelAdmin.initPlugin('main_menu', new PixelAdmin.MainMenu);
  });

}).call(this);



/* javascripts\build\components\alert.js */

// Generated by CoffeeScript 1.7.0
(function() {
  var ALERTS_CONTAINER_ID, Alert;

  ALERTS_CONTAINER_ID = 'pa-page-alerts-box';


  /*
   * @class Alert
   */

  Alert = function() {
    return this;
  };

  Alert.DEFAULTS = {
    type: 'warning',
    close_btn: true,
    classes: false,
    namespace: 'pa_page_alerts',
    animate: true,
    auto_close: false
  };

  Alert.TYPES_HASH = {
    warning: '',
    danger: 'alert-danger',
    success: 'alert-success',
    info: 'alert-info'
  };


  /*
   * Initialize plugin.
   */

  Alert.prototype.init = function() {
    var self;
    self = this;
    return $('#main-wrapper').on('click.pa.alerts', '#' + ALERTS_CONTAINER_ID + ' .close', function() {
      self.close($(this).parents('.alert'));
      return false;
    });
  };


  /*
   * Add new alert.
   *
   * @param  {String} html
   * @param  {Object} options
   */

  Alert.prototype.add = function(html, options) {
    var $alert, $alerts, $box, height, padding_bottom, padding_top;
    options = $.extend({}, Alert.DEFAULTS, options || {});
    $alert = $('<div class="alert alert-page ' + options.namespace + ' ' + Alert.TYPES_HASH[options.type] + '" />').html(html);
    if (options.classes) {
      $alert.addClass(options.classes);
    }
    if (options.close_btn) {
      $alert.prepend($('<button type="button" class="close" />').html('&times;'));
    }
    if (options.animate) {
      $alert.attr('data-animate', 'true');
    }
    $box = $('#' + ALERTS_CONTAINER_ID);
    if (!$box.length) {
      $box = $('<div id="' + ALERTS_CONTAINER_ID + '" />').prependTo($('#content-wrapper'));
    }
    $alerts = $('#' + ALERTS_CONTAINER_ID + ' .' + options.namespace);
    height = $alert.css({
      visibility: 'hidden',
      position: 'absolute',
      width: '100%'
    }).appendTo('body').outerHeight();
    padding_top = $alert.css('padding-top');
    padding_bottom = $alert.css('padding-bottom');
    if (options.animate) {
      $alert.attr('style', '').css({
        overflow: 'hidden',
        height: 0,
        'padding-top': 0,
        'padding-bottom': 0
      });
    }
    if ($alerts.length) {
      $alerts.last().after($alert);
    } else {
      $box.append($alert);
    }
    if (options.animate) {
      return $alert.animate({
        'height': height,
        'padding-top': padding_top,
        'padding-bottom': padding_bottom
      }, 500, (function(_this) {
        return function() {
          $alert.attr('style', '');
          if (options.auto_close) {
            return $.data($alert, 'timer', setTimeout(function() {
              return _this.close($alert);
            }, options.auto_close * 1000));
          }
        };
      })(this));
    } else {
      return $alert.attr('style', '');
    }
  };


  /*
   * Close alert.
   *
   * @param  {jQuery Object} $alert
   */

  Alert.prototype.close = function($alert) {
    if ($alert.attr('data-animate') === 'true') {
      return $alert.animate({
        'height': 0,
        'padding-top': 0,
        'padding-bottom': 0
      }, 500, function() {
        if ($.data($alert, 'timer')) {
          clearTimeout($.data($alert, 'timer'));
        }
        return $alert.remove();
      });
    } else {
      if ($.data($alert, 'timer')) {
        clearTimeout($.data($alert, 'timer'));
      }
      return $alert.remove();
    }
  };


  /*
   * Close all alerts with specified namespace.
   *
   * @param  {Boolean} animate
   * @param  {String} namespace
   */

  Alert.prototype.clear = function(animate, namespace) {
    var $alerts, self;
    if (animate == null) {
      animate = true;
    }
    if (namespace == null) {
      namespace = 'pa_page_alerts';
    }
    $alerts = $('#' + ALERTS_CONTAINER_ID + ' .' + namespace);
    if ($alerts.length) {
      self = this;
      if (animate) {
        return $alerts.each(function() {
          return self.close($(this));
        });
      } else {
        return $alerts.remove();
      }
    }
  };


  /*
   * Close all alerts.
   *
   * @param  {Boolean} animate
   */

  Alert.prototype.clearAll = function(animate) {
    var self;
    if (animate == null) {
      animate = true;
    }
    if (animate) {
      self = this;
      return $('#' + ALERTS_CONTAINER_ID + ' .alert').each(function() {
        return self.close($(this));
      });
    } else {
      return $('#' + ALERTS_CONTAINER_ID).remove();
    }
  };


  /*
   * Returns alerts container ID.
   */

  Alert.prototype.getContainerId = function() {
    return ALERTS_CONTAINER_ID;
  };

  Alert.Constructor = Alert;

  PixelAdmin.addInitializer(function() {
    return PixelAdmin.initPlugin('alerts', new Alert);
  });

}).call(this);



/* javascripts\build\plugins\switcher.js */

// Generated by CoffeeScript 1.7.0

/*
 * @class Switcher
 */

(function() {
  var Switcher;

  Switcher = function($el, options) {
    var box_class;
    if (options == null) {
      options = {};
    }
    this.options = $.extend({}, Switcher.DEFAULTS, options);
    this.$checkbox = null;
    this.$box = null;
    if ($el.is('input[type="checkbox"]')) {
      box_class = $el.attr('data-class');
      this.$checkbox = $el;
      this.$box = $('<div class="switcher"><div class="switcher-toggler"></div><div class="switcher-inner"><div class="switcher-state-on">' + this.options.on_state_content + '</div><div class="switcher-state-off">' + this.options.off_state_content + '</div></div></div>');
      if (this.options.theme) {
        this.$box.addClass('switcher-theme-' + this.options.theme);
      }
      if (box_class) {
        this.$box.addClass(box_class);
      }
      this.$box.insertAfter(this.$checkbox).prepend(this.$checkbox);
    } else {
      this.$box = $el;
      this.$checkbox = $('input[type="checkbox"]', this.$box);
    }
    if (this.$checkbox.prop('disabled')) {
      this.$box.addClass('disabled');
    }
    if (this.$checkbox.is(':checked')) {
      this.$box.addClass('checked');
    }
    this.$checkbox.on('click', function(e) {
      return e.stopPropagation();
    });
    this.$box.on('click', $.proxy(this.toggle, this));
    return this;
  };


  /*
   * Enable switcher.
   *
   */

  Switcher.prototype.enable = function() {
    this.$checkbox.prop('disabled', false);
    return this.$box.removeClass('disabled');
  };


  /*
   * Disable switcher.
   *
   */

  Switcher.prototype.disable = function() {
    this.$checkbox.prop('disabled', true);
    return this.$box.addClass('disabled');
  };


  /*
   * Set switcher to true.
   *
   */

  Switcher.prototype.on = function() {
    if (!this.$checkbox.is(':checked')) {
      this.$checkbox.click();
      return this.$box.addClass('checked');
    }
  };


  /*
   * Set switcher to false.
   *
   */

  Switcher.prototype.off = function() {
    if (this.$checkbox.is(':checked')) {
      this.$checkbox.click();
      return this.$box.removeClass('checked');
    }
  };


  /*
   * Toggle switcher.
   *
   */

  Switcher.prototype.toggle = function() {
    if (this.$checkbox.click().is(':checked')) {
      return this.$box.addClass('checked');
    } else {
      return this.$box.removeClass('checked');
    }
  };

  Switcher.DEFAULTS = {
    theme: null,
    on_state_content: 'ON',
    off_state_content: 'OFF'
  };

  $.fn.switcher = function(options, attrs) {
    return $(this).each(function() {
      var $this, sw;
      $this = $(this);
      sw = $.data(this, 'Switcher');
      if (!sw) {
        return $.data(this, 'Switcher', new Switcher($this, options));
      } else if (options === 'enable') {
        return sw.enable();
      } else if (options === 'disable') {
        return sw.disable();
      } else if (options === 'on') {
        return sw.on();
      } else if (options === 'off') {
        return sw.off();
      } else if (options === 'toggle') {
        return sw.toggle();
      }
    });
  };

  $.fn.switcher.Constructor = Switcher;

}).call(this);


/* javascripts\build\plugins\tasks.js */

// Generated by CoffeeScript 1.7.0
(function() {
  var Tasks;

  Tasks = function($el, options) {
    var self;
    if (options == null) {
      options = {};
    }
    this.$el = $el;
    this.options = $.extend({}, Tasks.DEFAULTS, options);
    self = this;
    $el.on('click', '.task input[type=checkbox]', function() {
      return self.completeTask($(this));
    }).on('click', '.task a', function() {
      $(this).parents('.task').find('input[type=checkbox]').click();
      return false;
    });
    return this;
  };

  Tasks.prototype.completeTask = function($trigger) {
    var $task;
    $task = $trigger.parents('.task');
    if ($task.toggleClass('completed').hasClass('completed')) {
      return this.options.onComplete.call(this);
    } else {
      return this.options.onCancel.call(this);
    }
  };

  Tasks.prototype.clearCompletedTasks = function() {
    $('.completed', this.$el).hide(200, function() {
      return $(this).remove();
    });
    return this.options.onClear.call(this);
  };

  Tasks.DEFAULTS = {
    onComplete: function() {},
    onCancel: function() {},
    onClear: function() {}
  };

  $.fn.pixelTasks = function(options) {
    return $(this).each(function() {
      var $this, pt;
      $this = $(this);
      pt = $.data(this, 'pixelTasks');
      if (!pt) {
        return $.data(this, 'pixelTasks', new Tasks($this, options));
      } else if (options === 'clearCompletedTasks') {
        return pt.clearCompletedTasks();
      }
    });
  };

  $.fn.pixelTasks.Constructor = Tasks;

}).call(this);



/* javascripts\build\plugins\rating.js */

// Generated by CoffeeScript 1.7.0
(function() {
  var Rating;

  Rating = function($el, options) {
    var i, self, _i, _ref;
    if (options == null) {
      options = {};
    }
    this.options = $.extend({}, Rating.DEFAULTS, options);
    this.$container = $('<ul class="widget-rating"></ul>');
    for (i = _i = 0, _ref = this.options.stars_count; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.$container.append($('<li><a href="#" title="" class="widget-rating-item"></a></li>'));
    }
    $el.append(this.$container);
    self = this;
    this.$container.find('a').on('mouseenter', function() {
      self.$container.find('li').removeClass(self.options.class_active);
      return $(this).parents('li').addClass(self.options.class_active).prevAll('li').addClass(self.options.class_active);
    }).on('mouseleave', function() {
      return self.setRating(self.options.rating);
    }).on('click', function() {
      self.options.onRatingChange.call(self, $(this).parents('li').prevAll('li').length + 1);
      return false;
    });
    this.setRating(this.options.rating);
    return this;
  };

  Rating.prototype.setRating = function(value) {
    this.options.rating = value;
    if ((value - Math.floor(value)) > this.options.lower_limit) {
      value = Math.ceil(value);
    } else {
      value = Math.floor(value);
    }
    return this.$container.find('li').removeClass(this.options.class_active).slice(0, value).addClass(this.options.class_active);
  };

  Rating.DEFAULTS = {
    stars_count: 5,
    rating: 0,
    class_active: 'active',
    lower_limit: 0.35,
    onRatingChange: function(value) {}
  };

  $.fn.pixelRating = function(options, args) {
    return $(this).each(function() {
      var $this, pr;
      $this = $(this);
      pr = $.data(this, 'pixelRating');
      if (!pr) {
        return $.data(this, 'pixelRating', new Rating($this, options));
      } else if (options === 'setRating') {
        return pr.setRating(args);
      }
    });
  };

  $.fn.pixelRating.Constructor = Rating;

}).call(this);


/*
 * 超出几行...功能
 * 部分小写字母和大写字母不能正常显示
 * */
(function() {
    'use strict';
    var Ellipsis = function(element, options) {
        this.$ = $(element);
        this.options = this.getOptions(options);
        this.$.is(':visible')==true&&this.init();
        var that = this;
        var ints = function(){
        	//console.log(that.$.is(':visible')==true)
        	that.$.is(':visible')==true&&that.init()
        }
        window.addEventListener('resize',ints)
        $('a[data-toggle="tab"]').on('shown.bs.tab', function(e) {
        	ints();
        })
    };

    Ellipsis.defaults = {
		maxLine: 1,
		ellipsisChar:'...',
		clickno:'',
		maxWidth:'',
		textSrc:'title',
		autoAdjustment:'on',
		//data:null,
        onCollapse: function() {}
    };

    Ellipsis.prototype.getOptions = function(options) {
        options = $.extend({},Ellipsis.defaults, this.$.data(), options);//设置参数
        return options;
    };
    
    Ellipsis.prototype.handleRemoveEvent=function(){
    	var data = this.$.attr('title');
    	// 中间版本 保留原有数据仅存title的情况
    	if(this.options.textSrc != 'title'){
    		data = this.$.html();
    	}else{
    		 this.$.find('a').length<=0?this.$.html(data):this.$.find('a').html(data);
    	}
    	
    	// 设定宽度取得
        var max = this.options.maxWidth;
	    if (!max) {
	        max = this.$.width();
	    }
	    
	    if(this.options.autoAdjustment == "on"){
	    	max = max * this.options.maxLine * 0.9;
	    }else{
	    	max = max * this.options.maxLine;
	    }
	    
	    var text = $.trim(this.$.find('a').text()).replace(' ','　')||$.trim(this.$.text()).replace(' ','　');
	    var htmlText = this.$.find('a').html()||this.$.html();
//	    if(this.options.textSrc == 'title'){
//	    	htmlText = this.$.attr("title");
//	    }
	    var $temp_elem = this.$.parent().clone(false)
	        .css({ "visibility": "hidden", "whiteSpace": "nowrap","width":"auto" })
	        .appendTo(document.body);
	    var width = $temp_elem.width();
	    //var style = window.getComputedStyle($temp_elem.get(0), null);
	    var ellipsis_char = this.options.ellipsisChar;
	    var htmlText_str = "";
	    if(width > max){
			var stop =  Math.floor(text.length * max / width); 
			var temp_str = text.substring(0, stop) + ellipsis_char;
			width = $temp_elem.text(temp_str).width();
			if(width > max){
				while (width > max && stop > 1) {
					stop--;
					temp_str = text.substring(0, stop) + ellipsis_char;
					width = $temp_elem.text(temp_str).width();
				}
				stop = refinedStopIndex(data, stop);
			}else if(width < max){
				while (width < max && stop < text.length) {
					stop++;
					temp_str = text.substring(0, stop) + ellipsis_char;
					width = $temp_elem.text(temp_str).width();
				}
				stop = refinedStopIndex(data, stop);
			}
			htmlText_str = htmlText.substring(0, stop) + ellipsis_char;
			this.$.find('a').prop('href')!=undefined?this.$.find('a').text(htmlText_str):this.$.html(htmlText_str + this.options.clickno);
		}else{
			this.$.find('a').prop('href')!=undefined?this.$.find('a').text(data):this.$.html(data);
		}
        $temp_elem.remove();
    }
    Ellipsis.prototype.String = function(){
    	this.handleRemoveEvent();
    	
    }
    Ellipsis.prototype.init = function() {
    	this.String();
    };

    $.fn.Ellipsis = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data('zui.Ellipsis');
            var options = typeof option == 'object' && option;
            if (!data) $this.data('zui.Ellipsis', (data = new Ellipsis(this, options)));
            if (typeof option == 'string') data[option]();
        });
    };
	
    $.fn.Ellipsis.Constructor = Ellipsis;//自定义方法接口
    $.fn.readyEllipsis = Ellipsis;//初始化接口
    //$.fn.Ellipsis.Constructor = $.fn.Ellipsis;
}).call(this)

function refinedStopIndex(data, stop){
	if(data == null || data == 'undefined' || data =="" ){
		return stop;
	}
	// 分割包含font标签的字符串
	var regVal = /(<font\s?[^\>]*>.*?<\/font>)/gi;
	var dataSplitLst = data.split(regVal);
	var strLastIndex = 0;
	var htmlIndex = 0;
	var textStr = "";
	var haveTag = false;
	if(!regVal.test(data)){
		return stop;
	}
	$.each(dataSplitLst, function(index, dataStr){
		textStr = dataStr;
		// 包含font标签的场合
		if(regVal.test(dataStr)){
			// 去除font标签
			var reg = /<font\s?[^\>]*>|<\/font>/gi;
			textStr = dataStr.replace(reg, "");
			haveTag = true;
		}
		
		// 截取字符串位置精确计算
		if(strLastIndex < stop && (strLastIndex + textStr.length) > stop){
			if(regVal.test(dataStr) && haveTag){
				stop = htmlIndex;
			}else if(haveTag){
				stop = htmlIndex + (stop - strLastIndex);
			}
		}
		strLastIndex = strLastIndex + textStr.length;
		htmlIndex = htmlIndex + dataStr.length;
	});
	return stop;
}
