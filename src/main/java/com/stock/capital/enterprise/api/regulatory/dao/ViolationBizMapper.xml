<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.stock.capital.enterprise.api.regulatory.dao.ViolationBizMapper">
	<select id="getCodeList" parameterType="Map" resultType="com.stock.core.dto.OptionDto">select c.code_value as value, c.code_name as label
		from sa_code c where c.code_no = #{codeNo} and c.valid_flag = '1'
		order by c.sort_no
	</select>
	<select id="getPunishClassList" parameterType="Map" resultType="Map">
		select
		t.id as id,
		t.parent_id as parentId,
		t.level as level,
		t.punish_class_name as label,
		t.punish_class_value as value
		from punish_class t
		<where>
			t.status = #{status}
			<if test="ids != null">
				<foreach collection="ids" item="id" open="AND (" close=")" separator=" OR ">t.punish_class_value = #{id}</foreach>
			</if>
		</where>
		order by t.sort
	</select>
	<select id="getTypeList" parameterType="Map" resultType="Map">
		select
		t.id as id,
		case when t.parent_id is null then '0' 
             when t.parent_id = '' then '0' 
        else t.parent_id 
        end as parentId,
		t.level as level,
		t.violate_class_name as label,
		t.violate_class_value as value
		from violate_class t
		<where>
			t.tree_type = #{treeType} and t.status = #{status}
			<if test="ids != null">
				<foreach collection="ids" item="id" open="AND (" close=")" separator=" OR ">t.violate_class_value = #{id}</foreach>
			</if>
		</where>
		order by t.sort
	</select>
	<!-- 需求1711 Start 2017/09/11 *违规处罚-案例查询-主办券商* byzhaozilong 2017/09/11 end -->
	<select id="getBrokerCodeList" parameterType="Map" resultType="Map">
		SELECT
			distinct
			t.broker_code as value,
			b.company_name AS label
		FROM
			neeq_companycode_brokercode t
		LEFT JOIN neeq_brokercompany_info b ON t.broker_code = b.company_code
        WHERE t.broker_code is not null
	</select>
    <select id="getViolateParentList" parameterType="Map" resultType="Map">
		SELECT
			id ,
			level,
			parent_id as parentId,
			violate_class_name as name,
			violate_class_value as value
			FROM violate_class 
        WHERE (parent_id is  null or parent_id= "")
        AND tree_type = #{treeType}
        AND status = 1
        order by sort
	</select>
	<select id="getViolateChildrenList" parameterType="Map" resultType="Map">
		SELECT
			id ,
			level,
			parent_id as parentId,
			violate_class_name as name,
			violate_class_value as value
			FROM violate_class 
        WHERE parent_id= #{id}
        AND tree_type = #{treeType}
        AND status = 1
        order by sort
	</select>
    <!--排序取层级  -->
<!--     <sql id="punishTypeCodeSort"> -->
<!--         select distinct t.violate_class_value, t.violate_class_name as violateClassName, -->
<!--                 t.`level` level, -->
<!--                 CONCAT( -->
<!--                     LPAD( -->
<!--                         IFNULL( -->
<!--                             g.`level`, -->
<!--                             IFNULL(p.`level`, t.`level`) -->
<!--                         ), -->
<!--                         3, -->
<!--                         '0' -->
<!--                     ), -->
<!--                     LPAD( -->
<!--                         IFNULL( -->
<!--                             g.sort, -->
<!--                             IFNULL(p.sort, t.sort) -->
<!--                         ), -->
<!--                         3, -->
<!--                         '0' -->
<!--                     ), -->
<!--                     LPAD( -->
<!--                         IFNULL(p.`level`, t.`level`), -->
<!--                         3, -->
<!--                         '0' -->
<!--                     ), -->
<!--                     LPAD( -->
<!--                         IFNULL(p.sort, t.sort), -->
<!--                         3, -->
<!--                         '0' -->
<!--                     ), -->
<!--                     LPAD(t.`level`, 3, '0'), -->
<!--                     LPAD(t.sort, 3, '0'), -->
<!--                     t.id -->
<!--                 ) sort -->
<!--             FROM -->
<!--                 violate_class t -->
<!--             LEFT JOIN ( -->
<!--                 SELECT -->
<!--                     p.id, -->
<!--                     p.parent_id, -->
<!--                     p.violate_class_name, -->
<!--                     p.sort, -->
<!--                     p.`level` -->
<!--                 FROM -->
<!--                     violate_class p -->
<!--                 WHERE -->
<!--                     p.tree_type = '2' -->
<!--                 AND p.`status` = 1 -->
<!--                 AND p.`level` = 1 -->
<!--             ) p ON CONCAT(t.parent_id, '0') = CONCAT(p.id, '0') -->
<!--             OR CONCAT(t.id, '0') = CONCAT(p.id, '0') -->
<!--             LEFT JOIN ( -->
<!--                 SELECT -->
<!--                     g.id, -->
<!--                     g.violate_class_name, -->
<!--                     g.sort, -->
<!--                     g.`level` -->
<!--                 FROM -->
<!--                     violate_class g -->
<!--                 WHERE -->
<!--                     g.tree_type = '2' -->
<!--                 AND g.`status` = 1 -->
<!--                 AND g.`level` = 0 -->
<!--             ) g ON CONCAT(p.parent_id, '0') = CONCAT(g.id, '0') -->
<!--             OR CONCAT(p.id, '0') = CONCAT(g.id, '0') -->
<!--         where t.`level` = '2' and -->
<!--         t.tree_type='2' -->
<!--     </sql> -->
    
    <sql id="favourListSql">
    	SELECT
		DATE_FORMAT(f.create_time,"%Y-%m-%d") AS favourTime,
		vm.id AS id,
		vm.company_code AS companyCode,
		vm.company_name AS companyName,
		vm.violate_title AS title,
		REPLACE(vm.violate_title,#{key},CONCAT('&lt;font
		style="color:#FF0000;"&gt;',#{key},'&lt;/font&gt;')) as titleHL,
		vm.disciplinary_org
		AS punishOrg,
		(
		SELECT GROUP_CONCAT(DISTINCT(vp.person)
		SEPARATOR '、')
		FROM
		violate_person vp
		WHERE
		vp.violate_id =
		vm.id
		) AS violatePerson,
        TT.sort AS punishTypeSort,
        TT.name AS punishTypeLabel,
        
		(select tmp.event_date
		from violate_manage_process_map tmp
		where tmp.violatemanage_id = vm.id
		order by tmp.sort desc
		limit 1
		) AS updateTime,
		(select tmp.event_date
		from violate_manage_process_map tmp
		where tmp.violatemanage_id = vm.id
		order by tmp.sort asc
		limit 1
		) AS releaseTime,
		(select tmp.content
		from violate_manage_process_map tmp
		where tmp.violatemanage_id = vm.id
		order by tmp.sort desc
		limit 1
		) AS content,
        (
        select vmap.url
        from violate_manage_url_map vmap
        where vmap.violatemanage_id = vm.id
        order by vmap.urlSort ASC
        limit 1
        ) AS url
		FROM
		favorite f
		INNER JOIN
		violate_manage vm
		ON
		f.biz_id = vm.id
		<if test="key != '' and key != null">AND (vm.violate_title LIKE CONCAT('%',#{key},'%') OR vm.content LIKE CONCAT('%',#{key},'%'))</if>
		<if test="vioCompanyCode != '' and vioCompanyCode != null">AND vm.company_code = #{vioCompanyCode}</if>
		<if test="violateType != '' and violateType != null">
			AND
			<foreach collection="violateTypes" item="violateType" open="(" close=")" separator=" OR ">find_in_set(#{violateType},vm.violate_type_value)</foreach>
		</if>
		<if test="adoptCondition != '' and adoptCondition != null">
			AND
			<foreach collection="adoptConditions" item="adoptCondition" open="(" close=")" separator=" OR ">vm.adopt_condition = #{adoptCondition}</foreach>
		</if>
        <if test="belongsToSRBType != '' and belongsToSRBType != null">
            INNER JOIN reg_company_info rci
            ON vm.company_code = rci.rela_company_code
                and find_in_set(rci.company_code, #{belongsToSRBType})
        </if>
        <if test="startDate != '' and startDate != null and endDate != '' and endDate != null">
			INNER JOIN
	        violate_manage_process_map processmap
	        ON
			processmap.violatemanage_id = vm.id
			AND (processmap.event_date &gt;= #{startDate} AND processmap.event_date &lt;= #{endDate})
		</if>
        
        INNER JOIN
		violate_person vp
		ON vp.violate_id = vm.id
		<if test="personType != '' and personType != null">
			AND
			<foreach collection="personTypes" item="personType" open="(" close=")" separator=" OR ">find_in_set(#{personType},vp.person_type)</foreach>
		</if>
		<if test="punishType != '' and punishType != null">
			AND
			<foreach collection="punishTypes" item="punishType" open="(" close=")" separator=" OR ">find_in_set(#{punishType},vp.penalty_type)</foreach>
		</if>
            left join 
        (
        SELECT vp.violate_id, GROUP_CONCAT(DISTINCT(code.violateClassName) SEPARATOR '、') name, GROUP_CONCAT(DISTINCT(code.sort)) sort
        FROM violate_person vp
        INNER JOIN ( 
        select distinct t.violate_class_value, t.violate_class_name as violateClassName,
                t.`level` level,
                CONCAT(
                    LPAD(
                        IFNULL(
                            g.`level`,
                            IFNULL(p.`level`, t.`level`)
                        ),
                        3,
                        '0'
                    ),
                    LPAD(
                        IFNULL(
                            g.sort,
                            IFNULL(p.sort, t.sort)
                        ),
                        3,
                        '0'
                    ),
                    LPAD(
                        IFNULL(p.`level`, t.`level`),
                        3,
                        '0'
                    ),
                    LPAD(
                        IFNULL(p.sort, t.sort),
                        3,
                        '0'
                    ),
                    LPAD(t.`level`, 3, '0'),
                    LPAD(t.sort, 3, '0'),
                    t.id
                ) sort
            FROM
                violate_class t
            LEFT JOIN (
                SELECT
                    p.id,
                    p.parent_id,
                    p.violate_class_name,
                    p.sort,
                    p.`level`
                FROM
                    violate_class p
                WHERE
                    p.tree_type = '2'
                AND p.`status` = 1
                AND p.`level` = 1
            ) p ON CONCAT(t.parent_id, '0') = CONCAT(p.id, '0')
            OR CONCAT(t.id, '0') = CONCAT(p.id, '0')
            LEFT JOIN (
                SELECT
                    g.id,
                    g.violate_class_name,
                    g.sort,
                    g.`level`
                FROM
                    violate_class g
                WHERE
                    g.tree_type = '2'
                AND g.`status` = 1
                AND g.`level` = 0
            ) g ON CONCAT(p.parent_id, '0') = CONCAT(g.id, '0')
            OR CONCAT(p.id, '0') = CONCAT(g.id, '0')
        where t.`level` = '2' and
        t.tree_type='2'
     ) code 
        ON
        FIND_IN_SET(code.violate_class_value, vp.penalty_type)
          group by vp.violate_id) TT
        ON TT.violate_id = vm.id
		WHERE f.user_id = #{userId} AND f.company_id = #{companyCode} AND f.type = #{type}
		<if test="sources != null">
			<foreach collection="sources" item="source" open=" AND (" close=")" separator=" OR ">f.source = #{source}</foreach>
		</if>
		group by vm.id
    </sql>
	<select id="getFavourList" parameterType="Map" resultType="com.stock.capital.enterprise.api.regulatory.dto.ViolationFavourDto">
SELECT

		a.favourTime,
		a.id,
		a.companyCode,
		a.companyName as companyName ,
		convert(a.companyName  using gbk) as companyNameSort ,
		a.content,
		a.title,
		a.titleHL,
		a.punishOrg,
		a.violatePerson,
        a.punishTypeSort,
        a.punishTypeLabel,
		a.releaseTime,
        a.url
		FROM
		(
		<include refid="favourListSql" />
		) a

		<if test="startDate != '' and startDate != null and endDate != '' and endDate != null">
            WHERE a.releaseTime &gt;= #{startDate} AND a.releaseTime &lt;= #{endDate}
        </if>
		<if test="orderColumn == '1'.toString()">ORDER BY a.companyCode</if>
		<if test="orderColumn == '2'.toString()">ORDER BY CONVERT(a.title USING gbk)</if>
		<if test="orderColumn == '3'.toString()">ORDER BY CONVERT(a.punishOrg USING gbk)</if>
		<if test="orderColumn == '4'.toString()">ORDER BY CONVERT(a.violatePerson USING gbk)</if>
		<if test="orderColumn == '5'.toString()">ORDER BY a.punishTypeSort</if>
		<if test="orderColumn == '6'.toString()">ORDER BY a.releaseTime</if>
		<if test="orderColumn == '7'.toString()">ORDER BY a.favourTime</if>
		<if test="orderByOrder =='asc'.toString()">ASC</if>
		<if test="orderByOrder =='desc'.toString()">DESC</if>
		<if test="orderColumn == '' || orderColumn == null">
			<if test="orderByOrder == '' || orderByOrder == null">ORDER BY a.releaseTime DESC</if>
		</if>
		limit #{startRow},#{pageSize}
	</select>
	<select id="getFavourListTotalCount" parameterType="Map" resultType="int">
		SELECT
		count(distinct(a.id))
		FROM
		(<include refid="favourListSql" />) a
	</select>
	<select id="getDetail" parameterType="Map" resultType="com.stock.capital.enterprise.api.regulatory.dto.ViolationDetailDto">SELECT
		vm.id AS id,
		vm.violate_title as title,
		vm.content AS content,
		REGEXP_REPLACE(REGEXP_REPLACE(vm.content,'&lt;(.|\n)+?&gt;', ''),'\t|\n|\r','') AS contentNohtml,
		vm.company_code AS companyCode,
		vm.company_name AS companyName,
		(
		SELECT GROUP_CONCAT(si.industry_name SEPARATOR '、')
		FROM securities_industry si
		WHERE FIND_IN_SET(si.id,vm.belong_trade)) AS belongTrade,
		(
        SELECT
        GROUP_CONCAT(DISTINCT(vc.violate_class_name) SEPARATOR '、')
        FROM violate_class vc
        WHERE vc.tree_type =
        '1'
        AND FIND_IN_SET(vc.violate_class_value, vm.violate_type_value)) AS violateTypeVO,
		vm.disciplinary_org AS punishOrg,
		vm.live_node AS liveNode,
		(
		SELECT
		GROUP_CONCAT(DISTINCT(code.code_name) SEPARATOR '、')
		FROM sa_code code
		WHERE code.code_no =
		'LIVE_NODE' AND FIND_IN_SET(code.code_value, vm.live_node)) AS liveNodeLabel,
		(
		SELECT
		GROUP_CONCAT(DISTINCT(code.code_name) SEPARATOR '、')
		FROM sa_code code
		WHERE
		code.code_no =
		'ADOPT_CONDITION' AND FIND_IN_SET(code.code_value, vm.adopt_condition)) AS adoptCondition
		FROM
		violate_manage vm
		WHERE vm.id = #{id}
	</select>
	<select id="getDetailProcessNodeList" parameterType="Map" resultType="com.stock.capital.enterprise.api.regulatory.dto.ViolationDetailNodeDto">
	select
		vmp.id as id,
		vmp.event_title as title,
		vmp.content as content,
		REGEXP_REPLACE(REGEXP_REPLACE(vmp.content,'&lt;(.|\n)+?&gt;', ''),'\t|\n|\r','') AS contentnohtml,
		vmp.event_date as eventDate,
		vmp.live_node as
		liveNode,
		vmp.sort as sort,
		c.code_name as nodeName,
		c.code_value as nodeValue
		from violate_manage_process_map vmp
		inner join sa_code c on vmp.live_node = c.code_value and c.code_no = 'LIVE_NODE'
		where vmp.violatemanage_id = #{id}
		order by vmp.sort
	</select>
	<select id="getDetailProcessNodeUrlList" parameterType="Map" resultType="com.stock.capital.enterprise.api.regulatory.dto.ViolationDetailLinkDto">select
		vmu.id as id,
		vmu.title as title,
		vmu.url as url
		from violate_manage_url_map vmu
		where vmu.violatemanage_id = #{id}
		and vmu.sort = #{sort}
		order by vmu.urlSort
	</select>
	<select id="getDetailPersonList" parameterType="Map" resultType="com.stock.capital.enterprise.api.regulatory.dto.ViolationDetailPersonDto">
		SELECT
		a.id,
		a.person,
		a.identity,
		a.violateTypeVO,
		a.punishType,
		a.punishAmount,
		a.punishAmountType,
		a.confiscateAmount,
		a.confiscateAmountType,
		a.penaltyAmount,
		a.penaltyAmountType,
		a.limitDate,
		a.limitYears,
		a.imprisonment,
		a.imprisonmentMonth,
		a.isRevoke,
		a.punishId,
		a.punishLevel
		FROM
		(SELECT
		vp.id AS id,
        vp.sort AS sort,
		vp.person AS person,
		(
		SELECT
		GROUP_CONCAT(DISTINCT(code.code_name) SEPARATOR '、')
		FROM sa_code code
		WHERE
		code.code_no =
		'PERSON_TYPE' AND FIND_IN_SET(code.code_value,
		vp.person_type)) AS identity,
		(
		SELECT
		GROUP_CONCAT(DISTINCT(vc.violate_class_name) SEPARATOR '、')
		FROM violate_class vc
		WHERE vc.tree_type =
		'1'
		AND FIND_IN_SET(vc.violate_class_value, vp.violate_type_value)) AS violateTypeVO,
		(
		SELECT
		GROUP_CONCAT(DISTINCT(vc.violate_class_name) SEPARATOR '、')
		FROM violate_class vc
		WHERE
		vc.tree_type =
		'2' AND
		FIND_IN_SET(vc.violate_class_value, vp.penalty_type)) AS punishType,
		vp.confiscate_amount AS
		confiscateAmount,
		(
		SELECT GROUP_CONCAT(DISTINCT(code.code_name) SEPARATOR '、')
		FROM sa_code
		code
		WHERE
		code.code_no =
		'AMOUNT_TYPE' AND FIND_IN_SET(code.code_value, vp.confiscate_amount_type)) AS
		confiscateAmountType,
		vp.penalty_amount AS punishAmount,
		(
		SELECT
		GROUP_CONCAT(DISTINCT(code.code_name)
		SEPARATOR '、')
		FROM sa_code code
		WHERE code.code_no =
		'AMOUNT_TYPE' AND
		FIND_IN_SET(code.code_value, vp.penalty_amount_type)) AS punishAmountType,
		vp.penalty
		as penaltyAmount,
		(
		SELECT
		GROUP_CONCAT(DISTINCT(code.code_name) SEPARATOR '、')
		FROM sa_code code
		WHERE
		code.code_no =
		'AMOUNT_TYPE' AND FIND_IN_SET(code.code_value, vp.fine_amount_type)) AS
		penaltyAmountType,
		DATE_FORMAT(vp.ban_time_begin,"%Y-%m-%d") as limitDate,
		vp.limit_years as limitYears,
		vp.imprisonment as imprisonment,
		vp.imprisonment_month as imprisonmentMonth,
		vp.status as isRevoke,
		(
		SELECT
		GROUP_CONCAT(DISTINCT(vc.id) SEPARATOR '、')
		FROM violate_class vc
		WHERE
		vc.tree_type =
		'2' AND
		FIND_IN_SET(vc.violate_class_value, vp.penalty_type)) AS punishId,
		(
		SELECT
		GROUP_CONCAT((vc.level) SEPARATOR '、')
		FROM violate_class vc
		WHERE
		vc.tree_type =
		'2' AND
		FIND_IN_SET(vc.violate_class_value, vp.penalty_type)) AS punishLevel
		FROM
		violate_person vp
		WHERE
		vp.violate_id = #{id}) a
		<if test="orderColumn == '0'.toString()">ORDER BY CONVERT(a.person USING gbk)</if>
		<if test="orderColumn == '1'.toString()">ORDER BY CONVERT(a.identity USING gbk)</if>
		<if test="orderColumn == '2'.toString()">ORDER BY CONVERT(a.violateTypeVO USING gbk)</if>
		<if test="orderColumn == '3'.toString()">ORDER BY CONVERT(a.punishType USING gbk)</if>
		<if test="orderColumn == '4'.toString()">ORDER BY a.punishAmount</if>
		<if test="orderColumn == '5'.toString()">ORDER BY a.confiscateAmount</if>
		<if test="orderColumn == '6'.toString()">ORDER BY a.limitDate</if>
		<if test="orderColumn == '7'.toString()">ORDER BY a.limitYears</if>
		<if test="orderColumn == '8'.toString()">ORDER BY a.penaltyAmount</if>
		<if test="orderColumn == '9'.toString()">
			<if test="orderByOrder =='asc'.toString()">ORDER BY a.imprisonment ASC,a.imprisonmentMonth ASC</if>
			<if test="orderByOrder =='desc'.toString()">ORDER BY a.imprisonment DESC,a.imprisonmentMonth DESC</if>
		</if>
		<if test="orderColumn == '10'.toString()">ORDER BY a.isRevoke</if>
		<if test="orderColumn != '9'.toString()">
			<if test="orderByOrder =='asc'.toString()">ASC</if>
			<if test="orderByOrder =='desc'.toString()">DESC</if>
		</if>
		<if test="orderColumn == '' || orderColumn == null">
			<if test="orderByOrder == '' || orderByOrder == null">order by a.sort, a.id</if>
		</if>
	</select>
	<select id="getDetailLawsList" parameterType="Map" resultType="com.stock.capital.enterprise.api.regulatory.dto.ViolationDetailLinkDto">select
		vmr.id as id,
		lm.laws_name as title,
		vmr.law_id as linkId,
		(select count(1) from violate_manage_rule_map vmrp
		inner join
		law_xml_structure_detail lxsd on lxsd.id = vmrp.law_item_id
		where vmrp.law_id = vmr.law_id and vmrp.violatemanage_id = vmr.violatemanage_id) as linkNum
		from violate_manage_rule_map vmr
		inner join laws_manage lm on vmr.law_id = lm.id and (lm.`status` = '2' or lm.`status` = '3')
		where
		vmr.violatemanage_id = #{id}
		group by vmr.law_id
		order by vmr.sort
	</select>
	<select id="getDetailCasesList" parameterType="Map" resultType="com.stock.capital.enterprise.api.regulatory.dto.ViolationDetailLinkDto">
	select vm2.id as id,
		vm2.violate_title as title
		from violate_manage vm
		inner join violate_manage vm2 on
		vm2.link_number=vm.link_number
		where  vm2.id !=vm.id and  vm.id = #{id} 
	</select>
	
	<select id="getTypeNameById" parameterType="Map" resultType="String">
		select t.violate_class_name as typeName
		from violate_class t
		<where>
			t.violate_class_value = #{violateId}
			AND t.tree_type=#{treeType}
		</where>
		order by t.sort
	</select>
	
	<select id="getCodeNameById" parameterType="Map" resultType="String">
		select t.code_name as codeName
		from sa_code t
		where t.code_no='PERSON_TYPE' AND t.code_value=#{name}
	</select>
	
	<select id="getPunishOrganizationById" parameterType="Map" resultType="String">
		select 
			t.punish_class_name
		from 
			punish_class t
		where 
			t.punish_class_value=#{name}
	</select>
	
    
    <select id="getViolateClass1ParentNo" parameterType="Map" resultType="String">
        select 
            <if test="violatePId != '' and violatePId != null">
                 distinct(t2.violate_class_value)
            </if>
            <if test="violatePId == '' or violatePId == null">
                 distinct(t1.violate_class_value)
            </if>
        from violate_class t1,violate_class t2
        where
            t2.parent_id = t1.id and t2.tree_type = #{treeType}
            <if test="violatePId != '' and violatePId != null">
                and t1.violate_class_value = #{violatePId}
            </if>
    </select>
    
    <select id="getViolateClass2ParentNo" parameterType="Map" resultType="String">
        select 
            <if test="violatePId != '' and violatePId != null">
                 distinct(t3.violate_class_value)
            </if>
            <if test="violatePId == '' or violatePId == null">
                 distinct(t1.violate_class_value)
            </if>
        from violate_class t1,violate_class t2,violate_class t3
        where
            t3.parent_id = t2.id and t2.parent_id = t1.id and t3.tree_type = #{treeType}
            <if test="violatePId != '' and violatePId != null">
            and t1.violate_class_value = #{violatePId}
            </if>
    </select>
    
    <!-- 需求3851 by weishisheng 2018/03/19 -->
    <!-- 取得所属证监会列表 -->
    <select id="getBelongsToSRBList" parameterType="Map" resultType="Map">
        SELECT
            t.company_code id,
            '' parentId,
            t.zh_name AS label,
            t.company_code AS value
        FROM
            sa_company t
        WHERE
            t.ipo_flag = '2'
        AND t.sup_open_flag = '1'
        ORDER BY
        IF (isnull(t.sup_order), 1, 0),
         t.sup_order + 0,
         CONVERT (t.zh_sort_name USING gbk)
    </select>
</mapper>

